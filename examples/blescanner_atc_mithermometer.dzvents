--[[
File: blescanner_atc_mithermometer.dzvents
Date: 20240107
Description:
Get the temperature, humidity and battery level from Xiaomi Mi Temperature and Hum Monitor 2 sensors.
The external python script blescanner.py, located in folder ~domoticz/scripts/python/, runs asynchronous to get the sensor data.
The sensor data is decoded according data format specifications.
The keys temperature, humidity and batterylevel are used to update a Domoticz device type Temp + Humidity, subtype THGN122/123/132, THGR122/228/238/268.
The device is created from the hardware controller dummy.

External shell command:
python scripts/python/blescanner.py -m MACADDRESS -a 1 -t 5
If the script does not run using python then use sudo python.

TODO Battery Level:
At the time of writing it is not possible to set the batterylevel via dzvents.
as the property batterylevel is readonly.
The workaround applied is updating the device via HTTP API request.
http://localhost:8080/json.htm?type=command&param=udevice&idx=%s&nvalue=0&svalue=%s&battery=%s

]]--

-- Switch Pushbutton on to trigger running the external python script
local IDX_TESTSWITCH = 3

-- Constants command & callback for the dzVents function executeShellCommand
local EXEC_CMD = "python scripts/python/blescanner.py -m {MACADDRESS} -a 1 -t 5"
local EXEC_CB = "ATCMITHERMOMETER"

-- Max execution time in seconds.
local EXEC_TIMEOUT = 45

-- Manufacturer key used to get the sensor data
local MANUFACTURER_KEY = "0XEC88"
local ADVERTISED_DATA_LENGTH = 15
local ADDRESS_KEY = "address"
local ADVERTISEMENT_KEY = "advertisementdata"
local UUID_SERVICE_DATA = '0000181A-0000-1000-8000-00805F9B34FB'

-- Timer rule - minimum is every 5 minutes (use for tests)
local TIMER_RULE = "every 5 minutes"
-- local TIMER_RULE = "every 15 minutes"

-- Define the mi sensors
-- mac - MAC address of the sensor. Use the tool sudo bluetoothctl > scan on to the mac address.
-- idxth - Domoticz temp+hum device for this sensor.
-- aftersec - Start the shell command after NN seconds (this to avoid multiple ble requests to hci0).
-- active - Set active to true for sensor usage.
local sensors = {
    s01 = {mac = "A4:C1:38:38:A9:0C", idxth = 2, aftersec=0, active=true},
    s02 = {mac = "A4:C1:38:52:74:C2", idxth = 1, aftersec=5, active=false},
}

-- Get the sensor table with properties for given mac address
local function get_sensor(domoticz, mac)
    local result = nil
    for k,v in pairs(sensors) do
        if (v.mac == mac) then
            result = v
            -- domoticz.log( string.format("%s=%s", k, v) )
        end
    end
    if result == nil then
        domoticz.log(string.format("Sensor %s not found.", mac), domoticz.LOG_ERROR)
    end
    return result
end

-- Update a Temp+Hum device incl. humidity status and battery level 0-100
-- This is done via http api request because dzvents does not support updating battery level (is readonly in dzvents)
local function update_device_temp_hum(domoticz, idx, temperature, humidity, batterylevel)
    -- Log the data
    domoticz.log(string.format(
        "idx=%d, temperature=%.2f, humidity=%.2f, humiditystatus=%d, batterylevel=%.1f"
        ,idx
        ,temperature
        ,humidity
        ,domoticz.utils.humidityStatus(temperature, humidity)
        ,batterylevel))

    -- Set the svalue TEMP;HUM;HUM_STAT
    local svalue = string.format(
        "%s;%s;%s"
        ,tostring(temperature)
        ,tostring(humidity)
        ,tostring(domoticz.utils.humidityStatus(temperature, humidity)))

    local url = string.format(
        "http://localhost:8080/json.htm?type=command&param=udevice&idx=%s&nvalue=0&svalue=%s&battery=%s",
        tostring(idx), svalue, tostring(batterylevel))
    -- domoticz.log(url)

    -- Submit the url without any additional parameter
    domoticz.openURL(url)
end

local function hexdecode(hex)
   return (hex:gsub("%x%x", function(digits) return string.char(tonumber(digits, 16)) end))
end

local function hexencode(str)
   return (str:gsub(".", function(char) return string.format("%02x", char:byte()) end))
end

-- Decode the data which has 7 bytes.
-- The data contains the macaddress (6 bytes) + sensordata (7 bytes) + 2 bytes not used for counter and flags
-- 0CA93838C1A49704E21A050B58960E
-- Data Conversion <HHHB = little indian, H=unsigned short (2 bytes * 3), B=unsigned char (1 byte) = total 7 bytes
-- Data Example (7 bytes) = 9704E21A050B58 > 9704 E21A 050B 58
-- t=HEX 0497 > DEC=1175 > 1175 / 100 = 11.75 Â°C
-- h=HEX 1AE2 > DEC=6882 > 6882 / 100 = 68.82 %RH
-- v=HEX 0B05 > DEC=2821 > 2821 / 1000 = 2.821 V
-- b=HEX 58 > DEC= > 88 = 88 %
-- temperature=11.75, humidity=68.82, battery=88, voltage=2.82
local function decode_advdata(domoticz, address, data)
    domoticz.log(string.format(
        'decode__advdata: address=%s,data=%s'
        ,address,data)) 

    -- Get the sensor data from the full data
    local startpos = (6*2) + 1
    local endpos = startpos + (7 * 2) - 1
    local data = string.sub(data, startpos, endpos)
    domoticz.log(string.format(
        'decode__advdata: devdata=%s'
        ,data)) 

    local temperature = tonumber('0x' .. string.sub(data,3,4) .. string.sub(data,1,2)) / 100
    local humidity = tonumber('0x' .. string.sub(data,7,8) .. string.sub(data,5,6)) / 100
    local voltage = tonumber('0x' .. string.sub(data,11,12) .. string.sub(data,9,10)) / 1000
    local batterylevel = tonumber('0x' .. string.sub(data,13,14))
    domoticz.log(string.format(
        'temperature=%.2f, humidity=%.2f, battery=%d, voltage=%.2f'
        ,temperature
        ,humidity
        ,batterylevel
        ,voltage)) 

    -- Get the sensor table for the idx & update the device
    local sensor = get_sensor(domoticz, address)
    if sensor.idxth > 0 then
        update_device_temp_hum(domoticz, sensor.idxth, temperature, humidity, batterylevel)
        -- Domoticz.Devices[].updateTempHum(temperature, humidity [, status] )
    end
end

-- Parse the device data (lua table)
-- {'address': 'A4:C1:38:38:A9:0C', 'name': 'ATC_38A90C', 'local_name': 'ATC_38A90C', 'advertisementdata': {'service_data': True, '0000181A-0000-1000-8000-00805F9B34FB': '0CA93838C1A45A054D1B150B5B0C0E', 'rssi': -56}}
local function parse_device_data(domoticz, data)
    -- The data is a table array. get the first item.
    data = data[1]
    local advdata = data[ADVERTISEMENT_KEY]
    decode_advdata(domoticz, data[ADDRESS_KEY], advdata[UUID_SERVICE_DATA])
end

-- Run the python3 script with the macaddress parameter
-- Use aftersec in case gathering data for more then one sensors
-- Request the sensor data by executing python script
local function get_sensor_data(domoticz, sensor)
    domoticz.log(string.format(
        "get_sensor_data:%s,%s"
        ,sensor.mac, sensor.active)) 

    if (sensor.active == true) then
        domoticz.executeShellCommand(
        {
            command = EXEC_CMD:gsub('{MACADDRESS}', sensor.mac),
            callback = EXEC_CB,
            timeout = EXEC_TIMEOUT,
        }).afterSec(sensor.aftersec)
    end
end

-- MAIN
return
{
    on = {
	    devices = { IDX_TESTSWITCH },
        timer = { TIMER_RULE },
        shellCommandResponses = { EXEC_CB },
    },
    logging = { 
        level = domoticz.LOG_DEBUG, marker = EXEC_CB, 
    },   

    execute = function(domoticz, item)
        -- Handle trigger switch or timer
        if (item.isDevice or item.isTimer) then 
            -- Loop over all sensors to get the sensor data
            for key, sensor in pairs(sensors) do
                domoticz.log(sensor)
                get_sensor_data(domoticz, sensor)
            end

        -- Handle shell command response
        elseif item.isShellCommandResponse then
            -- domoticz.log(item)
            -- Check if the response is a JSON object
            if (item.isJSON) then
                -- Get the sensor data json format             
                parse_device_data(domoticz, item.json)
            else
                -- Error = log the property errorText
                domoticz.log(item.errorText, domoticz.LOG_ERROR)
            end
        end
    end
}
